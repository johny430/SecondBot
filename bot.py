import telebot
from telebot import types
import json
import requests
import sqlite3
import threading
from random import randint
import time
from datetime import datetime
import hashlib
import random

bot = telebot.TeleBot('1194122886:AAEh8HEUsCHnrCNpjlsX15REDyp4eLsvAbk')
api_token = ''
group_id = -466351524
payment_group_id = -482890684
task_group_id = -498501871
coef = 0.036
qiwi_api_access_token = '53afd9e2ae19f16f12df0d7e3f97586c'
phone_number = '+380505679034'
nickname = ''

jsan = {
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': 2,
        'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏': 4,
        'üë§ –î—Ä—É–∑—å—è': 4,
        'üîÅ –†–µ–ø–æ—Å—Ç—ã': 4,
        'üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ': 2,
    },
    '–Æ—Ç—É–±': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': 6,
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 6,
        'üíî –î–∏–∑–ª–∞–π–∫–∏': 5,
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 2,
    },
    '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': 3,
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 4,
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 2,
    },
    '–¢–µ–ª–µ–≥—Ä–∞–º': {
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 4,
    },
    '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏': {
        'üëç –ö–ª–∞—Å—Å—ã': 3,
        'üë§ –î—Ä—É–∑—å—è': 3,
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 3,
    },
    '–¢–≤–∏—Ç—Ç–µ—Ä': {
        'üîÅ –†–µ—Ç–≤–∏—Ç—ã': 5,
        'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã': 5,
        '‚ù§Ô∏è –õ–∞–π–∫–∏': 5,
},
}

forapi = {
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': "likes",
        'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏': 'groups',
        'üë§ –î—Ä—É–∑—å—è': 'friends',
        'üîÅ –†–µ–ø–æ—Å—Ç—ã': "reposts",
        'üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ': "polls",
    },
    '–Æ—Ç—É–±': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': "likes",
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 6,
        'üíî –î–∏–∑–ª–∞–π–∫–∏': 'dislikes',
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': "comments_likes",
    },
    '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º': {
        '‚ù§Ô∏è –õ–∞–π–∫–∏': "likes",
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'subscribers',
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': "comments_likes",
    },
    '–¢–µ–ª–µ–≥—Ä–∞–º': {
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'subscribers',
    },
    '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏': {
        'üëç –ö–ª–∞—Å—Å—ã': "likes",
        'üë§ –î—Ä—É–∑—å—è': "friends",
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'groups',
    },
    '–¢–≤–∏—Ç—Ç–µ—Ä': {
        'üîÅ –†–µ—Ç–≤–∏—Ç—ã': "retweets",
        'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã': "followers",
        '‚ù§Ô∏è –õ–∞–π–∫–∏': "favorites",
},
}

speeds = {
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ':{
        '‚ù§Ô∏è –õ–∞–π–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 2,
            '–ë—ã—Å—Ç—Ä—ã–π' : 4,
            '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π' : 6,
            },
        'üë§ –î—Ä—É–∑—å—è':{
            '–û–±—ã—á–Ω—ã–π' : 4,
            '–ë—ã—Å—Ç—Ä—ã–π' : 6,
        },
        'üîÅ –†–µ–ø–æ—Å—Ç—ã':{
            '–û–±—ã—á–Ω—ã–π': 4,
            '–ë—ã—Å—Ç—Ä—ã–π' : 6,
            },
        'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏':{
            '–û–±—ã—á–Ω—ã–π': 4,
            '–ë—ã—Å—Ç—Ä—ã–π' : 7,
        },
        'üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ':{
            '–û–±—ã—á–Ω—ã–π' : 2,
            '–ë—ã—Å—Ç—Ä—ã–π' : 4,
            '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π' : 6,
        },
    },
    '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º':{
        '‚ù§Ô∏è –õ–∞–π–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 3,
            '–ë—ã—Å—Ç—Ä—ã–π' : 4,
            '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π' : 6,
        },
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 4,
            '–ë—ã—Å—Ç—Ä—ã–π' : 7,
        },
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':{
            '–û–±—ã—á–Ω—ã–π' : 2,
            '–ë—ã—Å—Ç—Ä—ã–π' : 4,
            '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π' : 6,
        },
    },
    '–Æ—Ç—É–±':{
        '‚ù§Ô∏è –õ–∞–π–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 6,
            '–ë—ã—Å—Ç—Ä—ã–π' : 9,
    },
        'üíî –î–∏–∑–ª–∞–π–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 5,
            '–ë—ã—Å—Ç—Ä—ã–π' : 10,
    },
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 6,
            '–ë—ã—Å—Ç—Ä—ã–π' : 9,
    },
        'üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':{
            '–û–±—ã—á–Ω—ã–π' : 2,
            '–ë—ã—Å—Ç—Ä—ã–π' : 4,
            '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π' : 6,
},
    },
    '–¢–µ–ª–µ–≥—Ä–∞–º':{
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 4,
            '–ë—ã—Å—Ç—Ä—ã–π' : 7,
        },
},
    '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏':{
        'üëç –ö–ª–∞—Å—Å—ã':{
            '–û–±—ã—á–Ω—ã–π' : 3,
            '–ë—ã—Å—Ç—Ä—ã–π' : 6,
        },
        'üë§ –î—Ä—É–∑—å—è':{
            '–û–±—ã—á–Ω—ã–π' : 3,
            '–ë—ã—Å—Ç—Ä—ã–π' : 6,
        },
        'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 3,
            '–ë—ã—Å—Ç—Ä—ã–π' : 6,
        },
},
    '–¢–≤–∏—Ç—Ç–µ—Ä':{
        'üîÅ –†–µ—Ç–≤–∏—Ç—ã':{
            '–û–±—ã—á–Ω—ã–π' : 5,
            '–ë—ã—Å—Ç—Ä—ã–π' : 10,
        },
        'üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã':{
            '–û–±—ã—á–Ω—ã–π' : 5,
            '–ë—ã—Å—Ç—Ä—ã–π': 10,
        },
        '‚ù§Ô∏è –õ–∞–π–∫–∏':{
            '–û–±—ã—á–Ω—ã–π' : 5,
            '–ë—ã—Å—Ç—Ä—ã–π' : 10,
        },
},
}

mytasks_btn = types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
sootv = {"–í–ö–æ–Ω—Ç–∞–∫—Ç–µ": "vk", "–¢–µ–ª–µ–≥—Ä–∞–º": "telegram", "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º": "instagram", "–¢–≤–∏—Ç—Ç–µ—Ä": "twitter","–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏": "ok", "–Æ—Ç—É–±": "youtube"}

menubuttion = types.KeyboardButton("–ú–µ–Ω—é")

markupkupon = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn0 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
item10 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—É–ø–æ–Ω")
markupkupon.add(btn0, item10)

markupopl2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn0 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
pppl = types.KeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
markupopl2.add(btn0,pppl)
markupnone = types.ReplyKeyboardMarkup(resize_keyboard=True)

kuda = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton("–í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
btn2 = types.KeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º")
btn3 = types.KeyboardButton("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º")
btn4 = types.KeyboardButton("–¢–≤–∏—Ç—Ç–µ—Ä")
btn5 = types.KeyboardButton("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
btn6 = types.KeyboardButton("–Æ—Ç—É–±")
kuda.add(btn1, btn2, btn3,btn4,btn5,btn6,btn0)

markupopl3 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
item111 = types.KeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(a)")
markupopl3.add(item111,btn0)

markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
btn1 = types.KeyboardButton("üöÄ –ù–∞–∫—Ä—É—Ç–∏—Ç—å")
btn2 = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
btn3 = types.KeyboardButton("‚úâÔ∏è –†–µ–ø–æ—Ä—Ç")
apravilabtn3 = types.KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞")
markup.add(btn1, btn2, btn3, mytasks_btn, apravilabtn3)

btn_2 = types.KeyboardButton("üíî –î–∏–∑–ª–∞–π–∫–∏")
btn_1 = types.KeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")
btn1 = types.KeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–∏")
btn2 = types.KeyboardButton("üë§ –î—Ä—É–∑—å—è")
btn3 = types.KeyboardButton("üîÅ –†–µ–ø–æ—Å—Ç—ã")
btn4 = types.KeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
btn5 = types.KeyboardButton("üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ")
btn6 = types.KeyboardButton("üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏")
btn7 = types.KeyboardButton("üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
btn8 = types.KeyboardButton("üíî –î–∏–∑–ª–∞–π–∫–∏")
btn9 = types.KeyboardButton("üë§ –î—Ä—É–∑—å—è")
btn10 = types.KeyboardButton("üëç –ö–ª–∞—Å—Å—ã")
btn11 = types.KeyboardButton("üîÅ –†–µ—Ç–≤–∏—Ç—ã")
btn12 = types.KeyboardButton("üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã")
vk = types.ReplyKeyboardMarkup(resize_keyboard=True)
tg = types.ReplyKeyboardMarkup(resize_keyboard=True)
inst = types.ReplyKeyboardMarkup(resize_keyboard=True)
twt = types.ReplyKeyboardMarkup(resize_keyboard=True)
odnkl = types.ReplyKeyboardMarkup(resize_keyboard=True)
youtube = types.ReplyKeyboardMarkup(resize_keyboard=True)
vk.add(btn1,btn2,btn3,btn5,btn_1,btn0)
inst.add(btn1,btn6,btn7,btn0)
youtube.add(btn1,btn6,btn7,btn_2,btn0)
tg.add(btn6,btn0)
odnkl.add(btn9,btn10,btn6,btn0)
twt.add(btn12,btn11,btn1,btn0)

markupnazad = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markupnazad.add(btn0)

markupopl = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
btnopl = types.KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å")
markupopl.add(btn0,btnopl)

markupchtos = types.ReplyKeyboardMarkup(row_width = 1)
anypay = types.KeyboardButton('üîó AnyPay (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)')
qiwis = types.KeyboardButton('ü•ù Qiwi')
markupchtos.add(anypay,qiwis,btn0)

@bot.message_handler(commands=['start'])
def welcome(message):
    if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
        bot.send_message(message.chat.id, '–í –±–µ—Å–µ–¥–∞—Ö –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            dannie = [int(message.from_user.id),float(0),int(0)]
            c.execute("INSERT OR IGNORE INTO Users VALUES (?,?,?)", dannie)
            conn.commit()
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üöÄ –ù–∞–∫—Ä—É—Ç–∏—Ç—å")
def krt(message):
    if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
        bot.send_message(message.chat.id, '–í –±–µ—Å–µ–¥–∞—Ö –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = ((int(message.chat.id)),)
            c.execute('SELECT * FROM zadania WHERE id = ?', t)
            e = c.fetchall()
            if int(len(e)) >= 10:
                bot.send_message(message.chat.id, '‚õîÔ∏è –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!', reply_markup=markup)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
                bot.register_next_step_handler(msg, chto)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def chto(message):
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    t = (int(message.chat.id),)
    c.execute("""DELETE from tzadania where id = ?""", t)
    conn.commit()
    if message.text == "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ":
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0,0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=vk)
        bot.register_next_step_handler(msg, next)
    elif message.text == '–¢–µ–ª–µ–≥—Ä–∞–º':
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0,0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=tg)
        bot.register_next_step_handler(msg, teg)
    elif message.text == '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º':
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0, 0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=inst)
        bot.register_next_step_handler(msg, insta)
    elif message.text == '–¢–≤–∏—Ç—Ç–µ—Ä':
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0, 0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=twt)
        bot.register_next_step_handler(msg, twter)
    elif message.text == '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏':
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0, 0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=odnkl)
        bot.register_next_step_handler(msg, odnoklas)
    elif message.text == '–Æ—Ç—É–±':
        b = str(message.text)
        t = int(message.chat.id)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        data2 = [t, b, 0, 0, 0, 0, 0, 0]
        c.execute("INSERT INTO tzadania VALUES (?,?,?,?,?,?,?,?)", data2)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=youtube)
        bot.register_next_step_handler(msg, youtab)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        t = (int(message.chat.id),)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        c.execute("""DELETE from tzadania where id = ?""", t)
        conn.commit()
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)

def next(message):
    spisok1 = ["‚ù§Ô∏è –õ–∞–π–∫–∏", "üë§ –î—Ä—É–∑—å—è", "üîÅ –†–µ–ø–æ—Å—Ç—ã","üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    elif str(message.text) == "üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ":
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:", reply_markup=markupnazad)
        bot.register_next_step_handler(msg, nextvk)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=vk)
        bot.register_next_step_handler(msg, next)

def nextvk(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=vk)
        bot.register_next_step_handler(msg, next)
    elif message.text == None:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, nextvk)
    elif message.text.isdigit():
        if int(message.text) > 0:
            o = int(message.text)
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            sql = """
            UPDATE tzadania
            SET polls = ? 
            WHERE id = ?
            """
            data = (o, int(message.from_user.id))
            c.execute(sql, data)
            conn.commit()
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:", reply_markup=markupnazad)
            bot.register_next_step_handler(msg, next2)
        else:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",reply_markup=markupnazad)
            bot.register_next_step_handler(msg, nextvk)
    else:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, nextvk)

def teg(message):
    spisok1 = ["üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=tg)
        bot.register_next_step_handler(msg, teg)

def insta(message):
    spisok1 = ["‚ù§Ô∏è –õ–∞–π–∫–∏","üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏","üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=inst)
        bot.register_next_step_handler(msg, insta)

def twter(message):
    spisok1 = ["‚ù§Ô∏è –õ–∞–π–∫–∏","üë• –§–æ–ª–ª–æ–≤–µ—Ä—ã","üîÅ –†–µ—Ç–≤–∏—Ç—ã"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=twt)
        bot.register_next_step_handler(msg, twter)

def odnoklas(message):
    spisok1 = ["üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏","üëç –ö–ª–∞—Å—Å—ã","üë§ –î—Ä—É–∑—å—è"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:",reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=odnkl)
        bot.register_next_step_handler(msg, odnoklas)

def youtab(message):
    spisok1 = ["üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏","‚ù§Ô∏è –õ–∞–π–∫–∏","üíï –õ–∞–π–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","üíî –î–∏–∑–ª–∞–π–∫–∏"]
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:', reply_markup=kuda)
        bot.register_next_step_handler(msg, chto)
    elif str(message.text) in spisok1:
        e = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET chto = ? 
        WHERE id = ?
        """
        data = (e, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:',reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=youtube)
        bot.register_next_step_handler(msg, youtab)

def next2(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        t = ((int(message.chat.id)),)
        c.execute('SELECT * FROM tzadania WHERE id = ?', t)
        e = c.fetchone()
        b = e[1]
        if b == "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ":
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=vk)
            bot.register_next_step_handler(msg, next)
        elif b == '–¢–µ–ª–µ–≥—Ä–∞–º':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=tg)
            bot.register_next_step_handler(msg, teg)
        elif b == '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=inst)
            bot.register_next_step_handler(msg, insta)
        elif b == '–¢–≤–∏—Ç—Ç–µ—Ä':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=twt)
            bot.register_next_step_handler(msg, twter)
        elif b == '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=odnkl)
            bot.register_next_step_handler(msg, odnoklas)
        elif b == '–Æ—Ç—É–±':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', reply_markup=youtube)
            bot.register_next_step_handler(msg, youtab)
        #bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=markup)
    else:
        g = str(message.text)
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        sql = """
        UPDATE tzadania
        SET url = ? 
        WHERE id = ?
        """
        data = (g, int(message.from_user.id))
        c.execute(sql, data)
        conn.commit()
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",reply_markup=markupnone)
        bot.register_next_step_handler(msg, next3)

def next3(message):
    g = str(message.text)
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    t = ((int(message.chat.id)),)
    c.execute('SELECT * FROM tzadania WHERE id = ?', t)
    a = c.fetchone()
    x = str(a[1])
    e = str(a[2])
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–∫—Ä—É—Ç–∫—É:',reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next2)
    elif message.text == None:
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markupnone)
        bot.register_next_step_handler(msg, next3)
    elif message.text.isdigit():
        if int(message.text) < 5:
            msg = bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 5\n\n–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markupnone)
            bot.register_next_step_handler(msg, next3)
        elif int(message.text) >= 2000:
            q = int(message.text)
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            sql = """
            UPDATE tzadania
            SET colvo = ? 
            WHERE id = ?
            """
            data = (q, int(message.from_user.id))
            c.execute(sql, data)
            conn.commit()
            markupSPEED = types.ReplyKeyboardMarkup(row_width=1)
            aloxa = list(speeds[x][e])
            for i in range(len(aloxa)):
                atatat = types.KeyboardButton(str(aloxa[i]))
                markupSPEED.add(atatat)
            markupSPEED.add(btn0)
            msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏:",reply_markup=markupSPEED)
            bot.register_next_step_handler(msg, rejim)
        else:
            try:
                q = int(message.text)
                f = int(jsan[x][e])
                l = f * q * coef
                l = round(l, 2)
                kaaaaa = '–û–±—ã—á–Ω—ã–π'
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                sql = """
                UPDATE tzadania
                SET sum = ? 
                WHERE id = ?
                """
                data = (l, int(message.from_user.id))
                c.execute(sql, data)
                sql = """
                UPDATE tzadania
                SET colvo = ? 
                WHERE id = ?
                """
                data = (q, int(message.from_user.id))
                c.execute(sql, data)
                sql = """
                UPDATE tzadania
                SET speed = ? 
                WHERE id = ?
                """
                data = (kaaaaa, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - "+str(l)+"‚ÇΩ",reply_markup=markupopl)
                bot.register_next_step_handler(msg, next4)
            except:
                bot.send_message(message.chat.id, "‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :(", reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markupnone)
        bot.register_next_step_handler(msg, next3)

def rejim(message):
    g = str(message.text)
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    t = ((int(message.chat.id)),)
    c.execute('SELECT * FROM tzadania WHERE id = ?', t)
    a = c.fetchone()
    x = str(a[1])
    e = str(a[2])
    q = int(a[4])
    aloxa = list(speeds[x][e])
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markupnazad)
        bot.register_next_step_handler(msg, next3)
    elif str(message.text) in aloxa:
        try:
            f = int(jsan[x][e])
            kaaaaa = str(message.text)
            if message.text == '–û–±—ã—á–Ω—ã–π':
                kaaaaa = str(message.text)
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                sql = """
                UPDATE tzadania
                SET speed = ? 
                WHERE id = ?
                """
                data = (kaaaaa, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                l = f * q * coef
                l = round(l, 2)
                sql = """
                UPDATE tzadania
                SET sum = ? 
                WHERE id = ?
                """
                data = (l, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - " + str(l) + "‚ÇΩ",reply_markup=markupopl)
                bot.register_next_step_handler(msg, next4)
            elif message.text == '–ë—ã—Å—Ç—Ä—ã–π':
                kaaaaa = str(message.text)
                c = conn.cursor()
                sql = """
                UPDATE tzadania
                SET speed = ? 
                WHERE id = ?
                """
                data = (kaaaaa, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                l = f * q * coef * 2
                l = round(l, 2)
                sql = """
                UPDATE tzadania
                SET sum = ? 
                WHERE id = ?
                """
                data = (l, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - " + str(l) + "‚ÇΩ",reply_markup=markupopl)
                bot.register_next_step_handler(msg, next4)
            elif message.text == '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π':
                kaaaaa = str(message.text)
                c = conn.cursor()
                sql = """
                UPDATE tzadania
                SET speed = ? 
                WHERE id = ?
                """
                data = (kaaaaa, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                l = f * q * coef * 3
                l = round(l, 2)
                sql = """
                UPDATE tzadania
                SET sum = ? 
                WHERE id = ?
                """
                data = (l, int(message.from_user.id))
                c.execute(sql, data)
                conn.commit()
                msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - " + str(l) + "‚ÇΩ",reply_markup=markupopl)
                bot.register_next_step_handler(msg, next4)
        except:
            bot.send_message(message.chat.id, "‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :(", reply_markup=markup)
    else:
        markupSPEED = types.ReplyKeyboardMarkup(row_width=1)
        aloxa = list(speeds[x][e])
        for i in range(len(aloxa)):
            atatat = types.KeyboardButton(str(aloxa[i]))
            markupSPEED.add(atatat)
        markupSPEED.add(btn0)
        msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏:", reply_markup=markupSPEED)
        bot.register_next_step_handler(msg, rejim)

def next4(message):
    try:
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markupnazad)
            bot.register_next_step_handler(msg, next3)
        elif message.text == '–û–ø–ª–∞—Ç–∏—Ç—å':
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            conn = sqlite3.connect('example.db')
            t = ((int(message.chat.id)),)
            c.execute('SELECT * FROM tzadania WHERE id = ?', t)
            eptoooo = c.fetchone()
            if str(eptoooo[2]) == 'üì¢ –ì–æ–ª–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ':
                data = [int(message.chat.id),str(eptoooo[1]),str(eptoooo[2]),str(eptoooo[3]),str(eptoooo[4]),str(eptoooo[6]),str(eptoooo[7])]
            else:
                data = [int(message.chat.id),str(eptoooo[1]), str(eptoooo[2]), str(eptoooo[3]), str(eptoooo[4]),str(eptoooo[7])]
            c.execute('SELECT * FROM users WHERE id=?', t)
            a = c.fetchone()
            l = eptoooo[5]
            q = int(eptoooo[4])
            if a[1] < l:
                bot.send_message(message.chat.id, '–î–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',reply_markup=markup)
            else:
                if len(data) == 6:
                    a = sootv[data[1]]
                    p = forapi[data[1]][data[2]]
                    c = data[3]
                    d = data[4]
                    f = data[5]
                    pl = speeds[data[1]][data[2]][data[5]]
                    data2 = [int(message.from_user.id),data[1],data[2],c,d,l]
                    params = {'api_token': api_token, 'network': a,'section': p,'link': c,'count': q, 'amount': pl}
                    rng1 = random.randint(1, 3)
                    rng2 = random.uniform(0.1, 1)
                    zad_time = rng2 * rng1
                    time.sleep(zad_time)
                    r = requests.get('https://vkmix.com/api/2/createTask', params=params)
                    ar = r.text
                    if ar.startswith('{"error":'):
                        bot.send_message(message.chat.id, '‚õîÔ∏è –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ',reply_markup=markup)
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = (int(message.chat.id),)
                        c.execute("""DELETE from tzadania where id = ?""", t)
                        conn.commit()
                    else:
                        task_id = r.json()["response"]["id"]
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = int(message.chat.id)
                        t = (t,)
                        c.execute('SELECT * FROM users WHERE id=?', t)
                        a = c.fetchone()
                        pox = float(a[1])
                        b = pox - float(l)
                        b = round(b, 2)
                        sql = """
                        UPDATE users
                        SET balance = ? 
                        WHERE id = ?
                        """
                        data = (b, int(message.from_user.id))
                        c.execute(sql, data)
                        conn.commit()
                        c.execute('SELECT * FROM nomezad')
                        apchu = c.fetchone()
                        now = datetime.now()
                        current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                        apchu = int(apchu[0])
                        apchu = apchu + 1
                        data2.append(apchu)
                        data2.append(task_id)
                        data2.append(current_time)
                        bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä - #"+str(data2[6]),reply_markup=markup)
                        c.execute("INSERT INTO zadania VALUES (?,?,?,?,?,?,?,?,?)",data2)
                        now = datetime.now()
                        current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                        msg = bot.send_message(task_group_id, 'üìã –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #' + str(apchu) + '\n\n–ö—Ç–æ —Å–æ–∑–¥–∞–ª: ' + str(message.from_user.id) + '\nTelegram –Ω–∏–∫: @' + str(message.from_user.username) + '\n–ö–∞–∫–∞—è —Å–æ—Ü.—Å–µ—Ç—å –≤—ã–±—Ä–∞–Ω–∞: ' + str(eptoooo[1]) + '\n–ß—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ' + str(eptoooo[2]) + '\n–ö—É–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–∫—Ä—É—Ç–∫–∞: '+str(eptoooo[3])+'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(eptoooo[4]) + '\n–°—É–º–º–∞: ' + str(l) + "‚ÇΩ" + '\n–í—Ä–µ–º—è: ' + str(current_time)+'\n\n–°—Ç–∞—Ç—É—Å: –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω')# (0/'+str(data2[4])+')')
                        sql = """
                        UPDATE nomezad
                        SET num = ? 
                        WHERE num = ?
                        """
                        data = (apchu, int(apchu - 1))
                        c.execute(sql, data)
                        conn.commit()
                        data13 = [int(msg.message_id),str(msg.text),int(task_id)]
                        c.execute("INSERT INTO tasks_status VALUES (?,?,?)", data13)
                        conn.commit()
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = (int(message.chat.id),)
                        c.execute("""DELETE from tzadania where id = ?""", t)
                        conn.commit()
                else:
                    a = sootv[data[1]]
                    p = forapi[data[1]][data[2]]
                    c = data[3]
                    d = data[4]
                    f = data[5]
                    pl = speeds[data[1]][data[2]][data[6]]
                    data2 = [int(message.from_user.id),data[1],data[2],c,d,f]
                    o = data[5]
                    params = {'api_token': api_token, 'network': a,'section': p,'link': c,'count': q, 'amount': pl,'poll':o}
                    rng1 = random.randint(1, 3)
                    rng2 = random.uniform(0.1, 1)
                    zad_time = rng2 * rng1
                    time.sleep(zad_time)
                    r = requests.get('https://vkmix.com/api/2/createTask', params=params)
                    ar = r.text
                    if ar.startswith('{"error":'):
                        bot.send_message(message.chat.id, '‚õîÔ∏è –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', reply_markup=markup)
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = (int(message.chat.id),)
                        c.execute("""DELETE from tzadania where id = ?""", t)
                        conn.commit()
                    else:
                        task_id = r.json()["response"]["id"]
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = int(message.chat.id)
                        t = (t,)
                        c.execute('SELECT * FROM users WHERE id=?', t)
                        a = c.fetchone()
                        pox = float(a[1])
                        b = pox - float(l)
                        b = round(b, 2)
                        sql = """
                        UPDATE users
                        SET balance = ? 
                        WHERE id = ?
                        """
                        data = (b, int(message.from_user.id))
                        c.execute(sql, data)
                        conn.commit()
                        c.execute('SELECT * FROM nomezad')
                        apchu = c.fetchone()
                        now = datetime.now()
                        current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                        apchu = int(apchu[0])
                        apchu = apchu + 1
                        data2.append(apchu)
                        data2.append(task_id)
                        data2.append(current_time)
                        bot.send_message(message.chat.id,"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä - #" + str(data2[6]),reply_markup=markup)
                        c.execute("INSERT INTO zadania VALUES (?,?,?,?,?,?,?,?,?)", data2)
                        now = datetime.now()
                        current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                        msg = bot.send_message(task_group_id,'üìã –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #' + str(apchu) + '\n\n–ö—Ç–æ —Å–æ–∑–¥–∞–ª: ' + str(message.from_user.id) + '\nTelegram –Ω–∏–∫: @' + str(message.from_user.username) + '\n–ö–∞–∫–∞—è —Å–æ—Ü.—Å–µ—Ç—å –≤—ã–±—Ä–∞–Ω–∞: ' + str(eptoooo[1]) + '\n–ß—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ' + str(eptoooo[2]) + '\n–ö—É–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–∫—Ä—É—Ç–∫–∞: ' + str(eptoooo[3]) + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(eptoooo[4]) + '\n–°—É–º–º–∞: ' + str(l) + "‚ÇΩ" + '\n–í—Ä–µ–º—è: ' + str(current_time) + '\n\n–°—Ç–∞—Ç—É—Å: –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω')  # (0/'+str(data2[4])+')')
                        sql = """
                        UPDATE nomezad
                        SET num = ? 
                        WHERE num = ?
                        """
                        data = (apchu, int(apchu - 1))
                        c.execute(sql, data)
                        conn.commit()
                        data13 = [int(msg.message_id), str(msg.text), int(task_id)]
                        c.execute("INSERT INTO tasks_status VALUES (?,?,?)", data13)
                        conn.commit()
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        t = (int(message.chat.id),)
                        c.execute("""DELETE from tzadania where id = ?""", t)
                        conn.commit()
        else:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            conn = sqlite3.connect('example.db')
            t = ((int(message.chat.id)),)
            c.execute('SELECT * FROM tzadania WHERE id = ?', t)
            eptoooo = c.fetchone()
            l = eptoooo[5]
            msg = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - "+str(l)+"‚ÇΩ",reply_markup=markupopl)
            bot.register_next_step_handler(msg, next4)
    except:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute("""DELETE from tzadania where id = ?""", t)
            conn.commit()
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    global  markupchto
    markupchto = types.ReplyKeyboardMarkup(row_width = 1)
    anypay = types.KeyboardButton('üîó AnyPay (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)')
    qiwis = types.KeyboardButton('ü•ù Qiwi')
    markupchto.add(anypay,qiwis,btn0)
    if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
        bot.send_message(message.chat.id, '–í –±–µ—Å–µ–¥–∞—Ö –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    else:
        global  a
        a = int(message.from_user.id)
        t = (a,)
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM users WHERE id=?', t)
            a = c.fetchone()
            msg = bot.send_message(message.chat.id, "–í–∞—à –±–∞–ª–∞–Ω—Å: "+str(a[1])+" ‚ÇΩ",reply_markup=markupopl2)
            bot.register_next_step_handler(msg, balance2)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def balance2(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=markup)
    elif message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å":
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=markupchto)
        bot.register_next_step_handler(msg, chtos)
    else:
        msg = bot.send_message(message.chat.id, "–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(a[1]) + "‚ÇΩ", reply_markup=markupopl2)
        bot.register_next_step_handler(msg, balance2)

def chtos(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=markup)
    elif message.text  == 'üîó AnyPay (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)':
        msg2 = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? (–æ—Ç 5‚ÇΩ)", reply_markup=markupnazad)
        bot.register_next_step_handler(msg2, anypays)
    elif message.text  == 'ü•ù Qiwi':
        msg4 = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? (–æ—Ç 5‚ÇΩ)", reply_markup=markupnazad)
        bot.register_next_step_handler(msg4, balance3)
    else:
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=markupchto)
        bot.register_next_step_handler(msg, chtos)

def anypays(message):
    global yes
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    elif message.text == None:
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=markupchto)
        bot.register_next_step_handler(msg, chtos)
    elif message.text.isdigit() and int(message.text) > 4:
        try:
            yes = str(message.text)
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM nomeranypay')
            a = c.fetchone()
            a = int(a[0])
            a = a + 1
            ax = str(a)
            project_id = '5813'
            amount = yes
            currency = 'RUB'
            pay_id = ax
            secret_key = 'bVWgGA6EoEoHllo6Tql8yCj'
            arr_sign = bytes(f'{currency}:{amount}:{secret_key}:{project_id}:{pay_id}', encoding='utf-8')
            result = hashlib.md5(arr_sign)
            a = result.hexdigest()
            a = str(a)
            params = {'merchant_id': project_id, 'amount': amount,'desc':'–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É','currency': currency, 'pay_id': pay_id, 'sign': a}
            r = requests.get('https://anypay.io/merchant', params=params)
            ek = str(r.url)
            data = [int(message.from_user.id), ax, yes]
            c.execute("INSERT INTO payments VALUES (?,?,?)", data)
            conn.commit()
            sql = """
            UPDATE nomeranypay
            SET num = ? 
            WHERE num = ?
            """
            ax = int(ax)
            data = (int(ax), int(ax - 1))
            c.execute(sql, data)
            conn.commit()
            msg = bot.send_message(message.chat.id,'–°—É–º–º–∞: ' + str(yes) + '\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n' + str(ek), reply_markup=markupopl3, parse_mode='html')
            bot.register_next_step_handler(msg, balance5)
            conn.commit()
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? (–æ—Ç 5‚ÇΩ)", reply_markup=markupnazad)
        bot.register_next_step_handler(msg, anypays)

def balance5(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            id = str(message.from_user.id)
            t = (id,)
            c.execute("""DELETE from payments where id = ?""", t)
            conn.commit()
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
    elif message.text == '‚úÖ –û–ø–ª–∞—Ç–∏–ª(a)':
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            id = str(message.from_user.id)
            t = (id,)
            c.execute('SELECT * FROM payments WHERE id=?', t)
            eka = c.fetchone()
            pay_id = str(eka[1])
            m = hashlib.sha256()
            m.update(b"payments5E24FF1B50BE374C76DC5813fkPEItrHxTvT9LzbXbCIj4BheRSuKLumYGcdE2u")
            a = m.hexdigest()
            params = {'project_id': '5813', 'sign': a,'pay_id':pay_id}
            r = requests.get('https://anypay.io/api/payments/5E24FF1B50BE374C76DC', params=params)
            a = r.json()
            if a['result']['payments'] == None:
                msg = bot.send_message(message.chat.id,'–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',reply_markup=markupopl3, parse_mode='html')
                bot.register_next_step_handler(msg, balance5)
            else:
                e = list(a['result']['payments'])
                if a['result']['payments'][e[0]]["pay_id"] == int(pay_id):
                    if a['result']['payments'][e[0]]["status"] == "paid":
                        rng1 = random.randint(1, 1)
                        rng2 = random.uniform(0.1, 1)
                        zad_time = rng2 * rng1
                        time.sleep(zad_time)
                        a = int(yes)
                        t = (int(message.chat.id),)
                        c.execute("""DELETE from payments where id = ?""", t)
                        t = (int(message.chat.id),)
                        c.execute('SELECT * FROM users WHERE id=?', t)
                        g = c.fetchone()
                        b = float(g[1]) + float(a)
                        b = round(b, 2)
                        sql = """
                        UPDATE users
                        SET balance = ? 
                        WHERE id = ?
                        """
                        t = int(message.chat.id)
                        data = (b, t)
                        c.execute(sql, data)
                        conn.commit()
                        bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ' + str(b) + '‚ÇΩ',reply_markup=markup)
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        c.execute('SELECT * FROM nomeraoplati')
                        opa = c.fetchone()
                        opa = opa[0]
                        opa = int(opa)
                        opa = opa + 1
                        now = datetime.now()
                        current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                        bot.send_message(payment_group_id, "üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ #" + str(opa) + "\n\n–°—É–º–º–∞: " + str(a) + "‚ÇΩ" + "\n–û–ø–ª–∞—á–µ–Ω–æ: AnyPay\n–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª: " + str(message.from_user.id) + "\nTelegram –Ω–∏–∫–Ω–µ–π–º: @" + str(message.from_user.username) + "\n–í—Ä–µ–º—è: " + str(current_time))
                        sql = """
                        UPDATE nomeraoplati
                        SET num = ? 
                        WHERE num = ?
                        """
                        data = (opa, int(opa - 1))
                        c.execute(sql, data)
                        conn.commit()
                        ajajaj = 10
                try:
                    ajajaj
                except:
                    msg = bot.send_message(message.chat.id,'–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',reply_markup=markupopl3, parse_mode='html')
                    bot.register_next_step_handler(msg, balance5)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è ‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',reply_markup=markup)
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute('SELECT * FROM payments WHERE id=?', t)
            ax = c.fetchone()
            project_id = '5813'
            amount = str(ax[2])
            currency = 'RUB'
            pay_id = str(ax[1])
            secret_key = 'bVWgGA6EoEoHllo6Tql8yCj'
            arr_sign = bytes(f'{currency}:{amount}:{secret_key}:{project_id}:{pay_id}', encoding='utf-8')
            result = hashlib.md5(arr_sign)
            a = result.hexdigest()
            a = str(a)
            params = {'merchant_id': project_id, 'amount': amount, 'currency': currency, 'pay_id': pay_id, 'sign': a}
            r = requests.get('https://anypay.io/merchant', params=params)
            ek = str(r.url)
            msg = bot.send_message(message.chat.id,'–°—É–º–º–∞: ' + str(ax[2]) + '\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n' + str(ek),reply_markup=markupopl3, parse_mode='html')
            bot.register_next_step_handler(msg, balance5)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def balance3(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    elif message.text == None:
        msg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? (–æ—Ç 5‚ÇΩ)", reply_markup=markupnazad)
        bot.register_next_step_handler(msg, balance3)
    elif message.text.isdigit() and int(message.text) > 4:
        try:
            g = int(message.text)
            f = int(message.chat.id)
            url = "https://qiwi.com/payment/form/99999?extra['account']="+str(nickname)+"&extra['comment']="+str(f)+"&amountInteger="+str(g)+"&amountFraction=0&currency=643&blocked[0]=sum&blocked[1]=account&blocked[2]=comment"
            data = [int(message.from_user.id),f,g]
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute("INSERT INTO payments VALUES (?,?,?)",data)
            conn.commit()
            msg = bot.send_message(message.chat.id, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!\n\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `'+str(f)+'`\n\n–°—É–º–º–∞: '+str(g)+'\n\n–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–∏–∫–Ω–µ–π–º–∞ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø—É—Å—Ç—ã–º, –≤–≤–µ–¥–∏—Ç–µ —Ç—É–¥–∞ "BOOSTME" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n' + str(url),reply_markup=markupopl3, parse_mode='markdown')
            bot.register_next_step_handler(msg, balance4)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? (–æ—Ç 5‚ÇΩ)", reply_markup=markupnazad)
        bot.register_next_step_handler(msg, balance3)

def balance4(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            id = str(message.from_user.id)
            t = (id,)
            c.execute("""DELETE from payments where id = ?""", t)
            conn.commit()
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
    elif message.text == '‚úÖ –û–ø–ª–∞—Ç–∏–ª(a)':
        try:
            s = requests.Session()
            s.headers['authorization'] = 'Bearer ' + qiwi_api_access_token
            parameters = {'rows': '20'}
            h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + phone_number + '/payments', params=parameters)
            req = json.loads(h.text)
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute('SELECT * FROM payments WHERE id=?', t)
            a = c.fetchone()
            if len(req['data']) == 0:
                bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=markupopl3)
            else:
                for i in range(len(req['data'])):
                    try:
                        int(req['data'][i]['comment'])
                    except:
                        continue
                    if int(req['data'][i]['comment']) == int(a[1]):
                        if int(req['data'][i]['sum']['amount']) == int(a[2]):
                            rng1 = random.randint(1, 1)
                            rng2 = random.uniform(0.1, 1)
                            zad_time = rng2 * rng1
                            time.sleep(zad_time)
                            t = (int(message.chat.id),)
                            c.execute("""DELETE from payments where id = ?""", t)
                            t = (int(message.chat.id),)
                            c.execute('SELECT * FROM users WHERE id=?', t)
                            g = c.fetchone()
                            b = float(g[1]) + float(a[2])
                            b = round(b, 2)
                            sql = """
                            UPDATE users
                            SET balance = ? 
                            WHERE id = ?
                            """
                            t = int(message.chat.id)
                            data = (b, t)
                            c.execute(sql, data)
                            conn.commit()
                            bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ' + str(b) + '‚ÇΩ',reply_markup=markup)
                            conn = sqlite3.connect('example.db')
                            c = conn.cursor()
                            c.execute('SELECT * FROM nomeraoplati')
                            opa = c.fetchone()
                            opa = opa[0]
                            opa = int(opa)
                            opa = opa + 1
                            now = datetime.now()
                            current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                            bot.send_message(payment_group_id,"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ #"+str(opa)+"\n\n–°—É–º–º–∞: "+str(a[2])+"‚ÇΩ"+"\n–û–ø–ª–∞—á–µ–Ω–æ: qiwi\n–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª: "+str(message.from_user.id)+"\nTelegram –Ω–∏–∫–Ω–µ–π–º: @"+str(message.from_user.username)+"\n–í—Ä–µ–º—è: "+str(current_time))
                            sql = """
                            UPDATE nomeraoplati
                            SET num = ? 
                            WHERE num = ?
                            """
                            data = (opa, int(opa - 1))
                            c.execute(sql, data)
                            conn.commit()
                            c.execute('SELECT * FROM qiwi_stats')
                            loxa = c.fetchone()
                            plus = float(a[2])
                            new_data = []
                            for i in range(len(loxa)-1):
                                ora = int(plus) + int(loxa[i])
                                new_data.append(ora)
                            ora = int(loxa[4]) + 1
                            new_data.append(ora)
                            t = ((int(ora - 1)),)
                            c.execute("""DELETE from qiwi_stats where amount = ?""", t)
                            conn.commit()
                            c.execute("INSERT INTO qiwi_stats VALUES (?,?,?,?,?)", new_data)
                            conn.commit()
                            aajajajajajjaj = 10
                try:
                    aajajajajajjaj
                except:
                    msg = bot.send_message(message.chat.id,'–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',reply_markup=markupopl3)
                    bot.register_next_step_handler(msg, balance4)
        except:
            msg = bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', reply_markup=markupopl3)
            bot.register_next_step_handler(msg, balance4)

    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute('SELECT * FROM payments WHERE id=?', t)
            a = c.fetchone()
            url = "https://qiwi.com/payment/form/99999?extra['account']=" + str(nickname) + "&extra['comment']=" + str(int(a[1])) + "&amountInteger=" + str(int(a[2])) + "&amountFraction=0&currency=643&blocked[0]=sum&blocked[1]=account&blocked[2]=comment"
            msg = bot.send_message(message.chat.id, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!\n\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + str(int(a[1])) + '\n\n–°—É–º–º–∞: ' + str(int(a[2])) + '\n–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ,–∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–∏–∫–Ω–µ–π–º–∞ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø—É—Å—Ç—ã–º, –≤–≤–µ–¥–∏—Ç–µ —Ç—É–¥–∞ "BOOSTME" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)\n\n–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n' + str(url),reply_markup=markupopl3)
            bot.register_next_step_handler(msg, balance4)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
def mytasls(message):
    try:
        if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
            bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö')
        else:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute('SELECT * FROM zadania WHERE id=?', t)
            a = c.fetchall()
            if a == []:
                bot.send_message(message.chat.id, '‚õîÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:', reply_markup=markup)
                for i in range(len(a)):
                    bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ #'+str(a[i][6])+'\n\n–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å: '+str(a[i][1])+'\n–£—Å–ª—É–≥–∞: '+str(a[i][2])+'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: '+str(a[i][4])+'\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: '+str(a[i][3])+'\n–°—É–º–º–∞: '+str(a[i][5])+'\n–°—Ç–∞—Ç—É—Å: –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: '+str(a[i][8]))
    except:
        bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
def mytasls(message):
    try:
        if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
            bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö')
        else:
            bot.send_message(message.chat.id, '1. –û–±—â–µ–µ\n\n 1.1 –ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n 1.2 –ù–∞—á–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n 1.3 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ª–∏—Ü–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π –ª–∏—Ü.\n\n 1.4 –ò–≥—Ä–æ–∫–∏ –æ–±—è–∑–∞–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª.\n\n 1.5 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n 1.6 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n 1.7 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥ (–ª–∞–π–∫–∏, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –¥—Ä—É–∑—å—è –∏ —Ç.–¥).\n\n2. –ê–∫–∫–∞—É–Ω—Ç\n\n 2.1 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–æ–±–Ω—É–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∂–µ–ª–∞–Ω–∏—é, –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.\n\n 2.2 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ–±—è–∑–∞–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/–æ–±–Ω—É–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n 2.3 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ–±–Ω—É–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø–æ—Å–µ—â–∞–≤—à–∏—Ö –±–æ—Ç–∞ –±–æ–ª–µ–µ 100 –¥–Ω–µ–π.\n\n 2.4 –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–≤–µ—Ä—à–∞–ª –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –¥–∞–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n\n 2.5 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç/–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@boost_me_support) —Ä–µ–∫–ª–∞–º—É, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Å–ø–∞–º.\n\n ‚õîÔ∏è –ù–∞–∫–∞–∑–∞–Ω–∏–µ: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —Å—Ä–æ–∫ –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–ï—Å–ª–∏ –í—ã –Ω–∞—à–ª–∏ –±–∞–≥, –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –±–æ—Ç—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–ø–æ—Ä—Ç. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –¥–µ–ª–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @boost_me_support\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ù§Ô∏è', reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –†–µ–ø–æ—Ä—Ç")
def report(message):
    if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
        bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö')
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (int(message.chat.id),)
            c.execute('SELECT * FROM banlist WHERE id = ?',t)
            fo = c.fetchone()
            if not fo == None:
                ban_time = fo[2]
                now_time = datetime.now().timestamp()
                rem_time = int(ban_time) - int(now_time)
                rem_time = int(rem_time)
                m, s = divmod(rem_time, 60)
                h, m = divmod(m, 60)
                d, h = divmod(h, 24)
                mn, d = divmod(d, 30)
                y, mn = divmod(mn, 12)
                if int(y) == 1:
                    remain_time = "%d–≥–æ–¥:%d–º–µ—Å:%d–¥–Ω:%d—á:%d–º–∏–Ω:%d—Å–µ–∫" % (y,mn,d,h, m, s)
                elif int(y) == 2 or int(y) == 3 or int(y) == 4:
                    remain_time = "%d–≥–æ–¥–∞:%d–º–µ—Å:%d–¥–Ω:%d—á:%d–º–∏–Ω:%d—Å–µ–∫" % (y,mn,d,h, m, s)
                else:
                    remain_time = "%d–ª–µ—Ç:%d–º–µ—Å:%d–¥–Ω:%d—á:%d–º–∏–Ω:%d—Å–µ–∫" % (y,mn,d,h, m, s)
                bot.send_message(message.chat.id, "–í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã\n\n–î–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: "+str(remain_time), reply_markup=markup)
            else:
                try:
                    conn = sqlite3.connect('example.db')
                    c = conn.cursor()
                    t = (int(message.chat.id),)
                    c.execute('SELECT * FROM reports WHERE status = ?', t)
                    fo = c.fetchone()
                    if fo == None:
                        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=markupnazad)
                        bot.register_next_step_handler(msg, nnn)
                    else:
                        bot.send_message(message.chat.id, "‚õîÔ∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!", reply_markup=markup)
                except:
                    bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def nnn(message):
    try:
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        c.execute('SELECT * FROM reporti')
        a = c.fetchone()
        a = int(a[0])
        a = a + 1
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            if len(str(message.text)) < 10:
                msg = bot.send_message(message.chat.id, "–†–µ–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤!", reply_markup=markupnazad)
                bot.register_next_step_handler(msg, nnn)
            else:
                bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=markup)
                now = datetime.now()
                current_time = now.strftime("%d.%m.%y –≤ %H:%M")
                msg = bot.send_message(group_id, 'üîî –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç #'+str(a)+'\n\n–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª: '+str(message.chat.id)+'\n–¢–µ–ª–µ–≥—Ä–∞–º–º –Ω–∏–∫–Ω–µ–π–º: @'+str(message.from_user.username)+'\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: '+str(current_time)+'\n\n–¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞: '+str(message.text))
                sql = """
                UPDATE reporti
                SET id = ? 
                WHERE id = ?
                """
                data = (a, int(a-1))
                c.execute(sql, data)
                conn.commit()
                data = [str(msg.text),int(message.chat.id)]
                c.execute('INSERT INTO reports VALUES (?,?)', data)
                conn.commit()
    except:
        bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin(message):
    global markupadmin
    markupadmin = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞")
    item2 = types.KeyboardButton("–ö—É–ø–æ–Ω")
    markupadmin.add(item1,item2,btn0)
    if message.chat.id == group_id or message.chat.id == payment_group_id or message.chat.id == task_group_id:
        bot.send_message(message.chat.id, '–í –±–µ—Å–µ–¥–∞—Ö –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            t = (message.chat.id,)
            c.execute('SELECT * FROM Users WHERE id=?', t)
            a = c.fetchone()
            if int(a[2]) == 1:
                msg = bot.send_message(message.chat.id, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markupadmin)
                bot.register_next_step_handler(msg, admin2)
            else:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def admin2(message):
    if message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=markupnazad)
        bot.register_next_step_handler(msg, rassilka)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    elif message.text == "–ö—É–ø–æ–Ω":
        params = {'api_token':api_token}
        r = requests.get('https://vkmix.com/api/2/getBalance', params=params)
        n = r.json()
        msg = bot.send_message(message.chat.id, '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: '+str(n['response']),reply_markup=markupkupon)
        bot.register_next_step_handler(msg, vvestik)

def vvestik(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markupadmin)
        bot.register_next_step_handler(msg, admin2)
    elif message.text == '–í–≤–µ—Å—Ç–∏ –∫—É–ø–æ–Ω':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:',reply_markup=markupnazad)
        bot.register_next_step_handler(msg, lod)
    else:
        msg = bot.send_message(message.chat.id, '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ' + str(n['response']), reply_markup=markupkupon)
        bot.register_next_step_handler(msg, vvestik)

def lod(message):
    a = str(message.text)
    params = {'api_token': api_token,'code':a}
    r = requests.get('https://vkmix.com/i/coupons/activate?', params=params)
    n = r.text
    if n.startswith('{"error"'):
        msg = bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—É–ø–æ–Ω–∞', reply_markup=markupadmin)
        bot.register_next_step_handler(msg, admin2)
    else:
        msg = bot.send_message(message.chat.id, '–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', reply_markup=markupadmin)
        bot.register_next_step_handler(msg, admin2)

def rassilka(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(message.chat.id, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markupadmin)
        bot.register_next_step_handler(msg, admin2)
    else:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM users')
            m = c.fetchall()
            try:
                for i in range (len(m)):
                    try:
                        bot.send_message(m[i][0], message.text)
                    except:
                        continue
                msg = bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',reply_markup=markupadmin)
                bot.register_next_step_handler(msg, admin2)
            except:
                msg = bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ!\n–ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç!', reply_markup=markupadmin)
                bot.register_next_step_handler(msg, admin2)
        except:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def xz(message):
    try:
        bantime = {
            '—Å–µ–∫': '1',
            '–º–∏–Ω':'60',
            '—á–∞—Å':'3600',
            '–Ω–µ–¥': '86400',
            '–º–µ—Å': '2678400',
            '–≥–æ–¥': '32140800',
        }
        if message.chat.id == group_id:
            if str(message.text).startswith('–ë–∞–Ω') or str(message.text).startswith('–±–∞–Ω') or str(message.text).startswith('ban') or str(message.text).startswith('Ban'):
                eko = str(message.text)
                a = eko.split(' ')
                try:
                    a = message.json['reply_to_message']['text']
                    f = a.split('\n')
                    f = f[1]
                    f = f[12:]
                    fax = int(f)
                    bot.send_message(fax,'–í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã')
                    bot.send_message(group_id,'–í—ã–¥–∞–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É')
                    conn = sqlite3.connect('example.db')
                    c = conn.cursor()
                    now = datetime.now()
                    bandate = datetime.timestamp(now)
                    a = eko.split(' ')
                    f = a[1]
                    e = a[2]
                    bantimes = int(bantime[str(e)]) * int(f)
                    banend = int(bandate) + int(bantimes)
                    data = [int(fax),bandate,banend,bantimes]
                    try:
                        t = (int(fax),)
                        c.execute("""DELETE from banlist where id = ?""", t)
                        conn.commit()
                    except:
                        pass
                    finally:
                        c.execute('INSERT OR IGNORE INTO banlist VALUES (?,?,?,?)',data)
                        conn.commit()
                except Exception as E:
                    try:
                        a = eko.split(' ')
                        f = a[1]
                        e = a[2]
                        g = a[3]
                        bot.send_message(int(f), '–í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã')
                        bot.send_message(group_id, '–í—ã–¥–∞–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É')
                        conn = sqlite3.connect('example.db')
                        c = conn.cursor()
                        now = datetime.now()
                        bandate = datetime.timestamp(now)
                        bantimes = int(bantime[str(g)]) * int(e)
                        banend = int(bandate) + int(bantimes)
                        data = [int(f), bandate, banend, bantimes]
                        try:
                            t = (int(f),)
                            c.execute("""DELETE from banlist where id = ?""", t)
                            conn.commit()
                        except:
                            pass
                        finally:
                            c.execute('INSERT OR IGNORE INTO banlist VALUES (?,?,?,?)', data)
                            conn.commit()
                    except Exception as E:
                        bot.send_message(group_id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
            elif message.text == "–ë–≤—Å–µ":
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                c.execute('SELECT * FROM users')
                auf = c.fetchall()
                esum = 0
                for i in range(len(auf)):
                    esum = esum + auf[i][1]
                bot.send_message(group_id, '–í—Å–µ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: '+str(esum) + ' ‚ÇΩ')
            elif message.text == "–†–≤—Å–µ":
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                c.execute('SELECT * FROM reports')
                auf = c.fetchall()
                if auf == []:
                    bot.send_message(group_id, '–í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã –æ—Ç–≤–µ—á–µ–Ω—ã!')
                else:
                    bot.send_message(group_id, '–í—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç—ã:')
                    for i in range(len(auf)):
                        bot.send_message(group_id, auf[i][0])
            elif str(message.text).startswith('setbalance'):
                try:
                    ept = str(message.text)
                    ept = ept.split(' ')
                    conn = sqlite3.connect('example.db')
                    c = conn.cursor()
                    t = ((int(ept[1])),)
                    c.execute('SELECT * FROM users WHERE id = ?',t)
                    auf = c.fetchone()
                    if auf == None:
                        bot.send_message(group_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ id!')
                    else:
                        a = int(ept[2])
                        sql = """
                        UPDATE users
                        SET balance = ? 
                        WHERE id = ?
                        """
                        data = (a, int(auf[0]))
                        c.execute(sql, data)
                        conn.commit()
                        bot.send_message(group_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(auf[0]) + '\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ' + str(a) + ' —Ä')
                except:
                    bot.send_message(group_id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')
            elif str(message.text).startswith('checkbalance'):
                try:
                    ept = str(message.text)
                    ept = ept.split(' ')
                    conn = sqlite3.connect('example.db')
                    c = conn.cursor()
                    t = ((int(ept[1])),)
                    c.execute('SELECT * FROM users WHERE id = ?', t)
                    auf = c.fetchone()
                    if auf == None:
                        bot.send_message(group_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ id!')
                    else:
                        bot.send_message(group_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(auf[0]) + '\n–ë–∞–ª–∞–Ω—Å: ' + str(auf[1]) + ' —Ä')
                except:
                    bot.send_message(group_id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')
            else:
                try:
                    a = message.json['reply_to_message']['text']
                    f = f = a.split('\n')
                    f = f[2]
                    f = f[12:]
                    f = int(f)
                    bot.send_message(f, 'üîî –í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + str(message.text))
                    bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
                    t = (message.json['reply_to_message']['text'],)
                    conn = sqlite3.connect('example.db')
                    c = conn.cursor()
                    c.execute("""DELETE from reports where text = ?""", t)
                    conn.commit()
                except:
                    pass
        elif message.chat.id == payment_group_id:
            if str(message.text) == '–ö—Å—Ç–∞—Ç':
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                c.execute('SELECT * FROM qiwi_stats')
                f = c.fetchone()
                bot.send_message(payment_group_id, '–ó–∞ —Å–µ–≥–æ–¥–Ω—è: '+str(f[0])+' —Ä\n–ó–∞ –Ω–µ–¥–µ–ª—é: '+str(f[1])+' —Ä\n–ó–∞ –º–µ—Å—è—Ü: '+str(f[2])+' —Ä\n–í—Å–µ–≥–æ: '+str(f[3])+' —Ä\n–ö–æ–ª-–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: '+str(f[4]))
            else:
                pass
        elif message.chat.id == task_group_id:
            pass
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)

def doubler():
    while True:
        try:
            params = {'api_token': api_token}
            r = requests.get('https://vkmix.com/api/2/getBalance', params=params)
            a = r.json()['response']
            a = int(a)
            if a == 0 or a is bool:
                time.sleep(300)
            elif a < 1000:
                conn = sqlite3.connect('example.db')
                c = conn.cursor()
                c.execute('SELECT * FROM users')
                o = c.fetchall()
                bot.send_message(group_id, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ' + str(a))
                #for i in range(len(o)):
                    #if int(o[i][2]) == 1:
                        #bot.send_message(int(o[i][0]),'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ' + str(a))
                time.sleep(1800)
            else:
                time.sleep(1800)
        except:
            time.sleep(1800)
            continue

def tripler_three():
    while True:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM zadania')
            e = c.fetchall()
            if e == []:
                time.sleep(300)
            else:
                for i in range(len(e)):
                    b = int(e[i][7])
                    params = {'api_token': api_token, 'id': b}
                    r = requests.get('https://vkmix.com/api/2/getTasks', params=params)
                    a = r.json()["response"]['items'][0]['status']
                    if str(a) == 'success':
                        bot.send_message(e[i][0], "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #"+str(int(e[i][6]))+" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                        t = (int(e[i][6]),)
                        c.execute("""DELETE from zadania where primirary_id = ?""", t)
                        conn.commit()
                time.sleep(300)
        except:
            time.sleep(300)

def unban():
    while True:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM banlist')
            ajj = c.fetchall()
            for el in ajj:
                now = datetime.now()
                timestamp = datetime.timestamp(now)
                if int(el[2]) <= int(timestamp):
                    t = (int(el[0]),)
                    c.execute("""DELETE from banlist where id = ?""", t)
                    conn.commit()
                    bot.send_message(int(el[0]), '–í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã')
                else:
                    continue
        except:
            continue

def nuller():
    while True:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM qiwi_stats')
            f = c.fetchone()
            now = datetime.now()
            a = now.strftime('%H:%M')
            a = str(a)
            if a == '08:00' or a == '08:01' or a == '08:02' or a == '08:03' or a == '08:04' or a == '08:05':
                sql = """
                UPDATE qiwi_stats
                SET today = ? 
                WHERE today = ?
                """
                data = (int(0), int(f[0]))
                c.execute(sql, data)
                conn.commit()
            b = now.strftime('%A')
            if str(b) == 'Monday' and a == '08:00' or a == '08:01' or a == '08:02' or a == '08:03' or a == '08:04' or a == '08:05':
                sql = """
                UPDATE qiwi_stats
                SET week = ? 
                WHERE week = ?
                """
                data = (int(0), int(f[1]))
                c.execute(sql, data)
                conn.commit()
            v = now.strftime('%d')
            if str(v) == '01' and a == '08:00' or a == '08:01' or a == '08:02' or a == '08:03' or a == '08:04' or a == '08:05':
                sql = """
                UPDATE qiwi_stats
                SET months = ? 
                WHERE months = ?
                """
                data = (int(0), int(f[2]))
                c.execute(sql, data)
                conn.commit()
        except:
            continue

def task_status_chng():
    while True:
        try:
            conn = sqlite3.connect('example.db')
            c = conn.cursor()
            c.execute('SELECT * FROM tasks_status')
            f = c.fetchall()
            for i in range(len(f)):
                params = {'api_token': api_token, 'id': int(f[i][2])}
                r = requests.get('https://vkmix.com/api/2/getTasks', params=params)
                #a = r.json()["response"]['items'][0]['done_count']
                #eptaaa = str(f[i][1])
                #af = eptaaa.rfind('0')
                #text = eptaaa[:af] + str(a) + eptaaa[af + 1:]
                try:
                    #bot.edit_message_text(chat_id=task_group_id, message_id=int(f[i][0]), text=str(text))
                    e = r.json()["response"]['items'][0]['status']
                    if str(e) == 'success':
                        text = str(f[i][1])
                        text = text.replace('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω','–í—ã–ø–æ–ª–Ω–µ–Ω')
                        bot.edit_message_text(chat_id=task_group_id, message_id=int(f[i][0]), text=str(text))
                        t = (int(f[i][2]),)
                        c.execute("""DELETE from tasks_status where task_id = ?""", t)
                        conn.commit()
                    else:
                        continue
                except:
                    continue
        except:
            continue

if __name__ == '__main__':
    my_thread1 = threading.Thread(target=doubler)
    my_thread1.start()
    my_thread2 = threading.Thread(target=tripler_three)
    my_thread2.start()
    my_thread3 = threading.Thread(target=unban)
    my_thread3.start()
    my_thread4 = threading.Thread(target=nuller)
    my_thread4.start()
    my_thread5 = threading.Thread(target=task_status_chng)
    my_thread5.start()
    bot.polling(none_stop=True, timeout=999999)
